.data
    n: .word 5
    v: .word 3, 4, 5, 6, 7
    sp: .asciiz " "

.text
main:
	#adauga n la stiva
    lw $t0,n
    subu $sp,$sp,4
    sw $t0,0($sp)

    #adauga v la stiva
    la $t0,v
    subu $sp,$sp,4
    sw $t0,0($sp)

    jal modifica #modifica vectorul

	
    li $t0, 0 # contor=0
    li $t1, 0 # index=0
    lw $t2, n
    
# printeaza vectorul
afiseaza_array:
    beq $t0, $t2, exit

    lw $a0, v($t1)
    li $v0, 1
    syscall

    la $a0, sp
    li $v0, 4
    syscall

    addi $t1, 4 # index += 4
    addi $t0, 1 # contor += 1
    j afiseaza_array

exit:
    addu $sp, 8
    li $v0, 10
    syscall

modifica:
    #adauga $fp la stiva
    subu $sp,$sp,4
    sw $fp,0($sp)
    addi $fp,$sp,4

    #adauga $ra la stiva
    subu $sp,$sp,4
    sw $ra,0($sp)

    #adauga $s0 la stiva
    subu $sp,$sp,4
    sw $s0,0($sp)

    #adauga $s1 la stiva
    subu $sp,$sp,4
    sw $s1,0($sp)

    #luam argumentele
    lw $s0,0($fp) # v
    lw $s1,4($fp) # n

    # daca n = 0 iesi din procedura
    beqz $s1, exit_modifica

    
    #adauga n la stiva
    subu $sp, 4
    lw $t0, 0($s0)
    sw $t0, 0($sp)
    
    jal suma_patrate
    
    addi $sp, 4
    # v[i] = suma_patrate(v[i])
    sw $v0, 0($s0)

    addi $s0, 4  # v += 4
    addi $s1, -1 # n -= 1

	#adauga $s1 la stiva
    subu $sp,$sp,4
    sw $s1,0($sp)
    
	#adauga $s0 la stiva
    subu $sp,$sp,4
    sw $s0,0($sp)
    
    jal modifica # se reapeleaza
    
    addu $sp, 8

exit_modifica:
    lw $s1, -16($fp)
    lw $s0, -12($fp)
    lw $ra, -8($fp)
    lw $fp, -4($fp)
    addu $sp, 16
    jr $ra


suma_patrate:
    # adauga $fp la stiva
    subu $sp, 4
    sw $fp, 0($sp)
    addi $fp, $sp, 4

    #adauga $ra la stiva
    subu $sp,$sp,4
    sw $ra,0($sp)
    
    #adauga $s0 la stiva
    subu $sp,$sp,4
    sw $s0,0($sp)
    
    # extragem argumentele
    lw $s0, 0($fp) # int v[i]
    subu $s0, 1    # v[i] = v[i] - 1; 

    # daca v[i] == 1, returneaza 1;
    ble $s0, 1, adauga_1
    
    # adauga v[i] la stiva
    subu $sp, 4
    sw $s0, 0($sp)
    
    jal suma_patrate # se reapeleaza
    
    addu $sp, 4

    move $t0, $v0 # s = suma_patrate(v[i])
    mul $s0, $s0, $s0 # v[i] = v[i]^2
    add $v0, $t0, $s0 # returneaza v[i] + s

    j exit_suma_patrate #iese din suma_patrate

adauga_1:
    li $v0, 1
    
exit_suma_patrate:
    lw $s0, -12($fp)
    lw $ra, -8($fp)
    lw $fp, -4($fp)
    addu $sp, 12
    jr $ra
